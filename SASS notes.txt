SASS Notes:

Command used to run the code: gulp

>> SASS has 2 extensions: .scss or .sass but, .scss is most commonly used. Both has some different syntax.
>> We can write vanila/normal css inside .scss extension file.


How to compile sass into css?
>> Browser does not understand the SASS code hence we need to compile it into vanila css and for this we use live sass compiler package extension of VS code and then press Watch Sass button present at the bottom of VS code.


How to install GULP?
>> But we will use GULP which allows us to have features like tree shaking which removes the all unwanted styles and also we get the sass debug tool with GULP.
>> For installing GULP use "npm i gulp gulp-sass sass -g --save-dev" command.
>> Then create gulpfile.js file and write the boilerplate code there.
>> Then run GULP command. 
>> It will create the css folder and inside which there will be index.css file.
>> Then link this file in index.html file above title.



Creating variables in sass:
>> For creating variables in sass use $ sign. For example: $primary: #326dee;
>> For using that variable just use $. For example:  h1{color: $primary;}
  

Partial and Import:
>> There might be very long sass file if you write all the sass in one file hence to avoid it we can use partial.
>> There can be seperate file for variables, seperate for resets etc and we can combine all of those partial files into single root sass file.
>> Now when we create the partial files to import those we have to use import.
>> For importing the sass file write like this at the top of the file where you want to import it:
@import 'variables';
>> Note: While importing we do not need to write the .scss extension.


Asterisk (*) use in gulpfile.js:
>> If we want to create the single .css file then we can write index.scss in buildStyle and watchTask function.
>> Pan jar tumhala jevdhya .scss ahet tevdhya .css file bnvaychya astil tar *.scss as lihaych.


Partial and Import:
CONTD
>> * vaprlyavr variables.css file suddha compile hoil. And it will be empty because syntax is not understandable by .css file.
>> Mag apan partial files compile karne thambvu shkto using "_". Means just write underscore before the name of the partial file. 
>> Hence, while using partial files write _ before it. Not mandatory but we can use it to avoid it getting compiled in .css file.



Shinobi structure:
>> For creating shinobi css library we have to modify the gulpfile.js.
>> Hence, added 'shinobi/**/*.scss' it means look for .scss files inside shinobi folder and **/ means also look inside its subfolders.


Import orders:
>> Keep variables and functions at the top level of import.
>> Then keep the base after this.
>> Then rest of your imports will come.


Nested css: 
>> We can nest our css styles instead of writing nested selector in sass.


Using Math in sass:
>> We can use the variables that we have declared in sass and create another variable using multiplication.
    like: 
    $base-font-size: 1rem;
    $font-size-sm: $base-font-size * 0.75;
    $font-size-lg: $base-font-size * 1.5;
    $font-size-xl: $base-font-size * 2;
    $font-size-xxl: $base-font-size * 3;

>> We can also do the division.
For division we cannot directly write like this: $base-font-size/2 instead we need to use the math package.
For using the math package write @use 'sass:math' at the top of the file in which you want to use the math.
Then you can write like this: math.div($base-font-size, 4) it means division by 4.


@debug: 
>> For debugging sass in the console we can use @debug.
>> It prints whatever you write after @debug in the console.
>> For this you just need to write what you want to print after @debug like:
@debug "hello world";
@debug math.div(10,3);
@debug math.floor(5.6);
@debug math.max(10px, 20px, 15px, 8px);



map:
>> It consists of key value pair same as object in js.
>> You can create map like this: 
    $colors: (
        "blue": #1919e6,
        "red": #e61919,
        "yellow": #e6e619,
        "green": #19e635
    )
>> There are some methods which you can use with map: 
Note: While using the map methods do not give the space before the brackets.
1. map-get --> Gives the value of the key. 
example: @debug map-get($colors, "blue") --> prints #1919e6

2. map-has-key --> Checks if we have any key in the map.
example: @debug map-has-key($colors, "yellow") --> prints true and if key is not available then prints false.

3. map-remove --> Removes the key from the map.
example: @debug map-remove ($colors, "red") --> prints the whole map without "red" key.

4. map-merge --> Adds the key to the map.
example: @debug map-merge ($colors, ("pink": #ffc0cb)) --> prints the whole map without "red" key.




How to iterate through the map:
@each method:
>> For iterating over map we can use @each method.
    Example: 
    @each $key, $val in $colors{
        .text-#{$key}{ // #{$key} it means adding variable in the css selector
            color: $val;
        }
    }   
>> This code will assign dynamic value to its dynamic key.
>> For adding variable in css selector we can use #{$variable_name}


@for method:
>> For iterating on anything for more than 1 time we use @for method.
    Example:
    @each $key, $val in $colors{
        .text-#{$key}{ // #{$key} it means adding variable in the css selector
            color: $val;
        }

        @for $i from 1 through 9{
            .text-#{$key}-light-#{$i}{
                color: mix(white, $val, $i * 10) // It means mix the white color in $val color with $i*10 percentage.
            }
        }
    } 
>> @for loop is written inside @each loop hence for each color @for loop will run 9 times and will generate 9 light variations of the color. Where 1 is less lighter and 9 is most lighter.





@if and @else conditional statements:
>> It is same as programming if else conditions.
Example: 
    @if($val != white and $val != black){
        .text-#{$key}{
            color: $val;
        }
    }@else{
        .text-#{$key}{
            color: green;
        }
    }


Parent selector:
>> We need parent selector so that we can addi hover and other effects to the parent.
    Example:
    .text-hover-#{$key}{
        &:hover{            // It means add hover effect to the .text-hover-#{$key} selector.
            color: $val
        }
    }





Mixin:
>> When you are creating two different utility classes like btn and btn-outline and properties of both the classes are almost same except 1 2 differences then instead of repeating those common properties again we can use mixins.
    Example:
    .btn-#{$key} {
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding * 2;
        border-radius: $base-border-radius;
        background-color: $val;
    }

    .btn-outlined-#{$key} {
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding * 2;
        border-radius: $base-border-radius;
        background-color: #fff;
        border: $base-border-thickness solid $val;
    }

>> btn and btn-outlined has almost all properties same instead background-color and border.
>> Hence we can create mixin for those common properties and rewrite above code like this:
    @mixin btn(){
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding * 2;
        border-radius: $base-border-radius;
    }

    .btn-#{$key}{
        @include btn();
        background-color: $val;
    }

    .btn-outlined-#{$key}{
        @include btn();
        background-color: #fff;
        border: $base-border-thickness solid $val;
    }



You can also pass the argument to the mixin:
    Example:
    @mixin btn($bg-color){ // creating $bg-color parameter which will add for background-color property
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding * 2;
        border-radius: $base-border-radius;
        background-color: $bg-color;
    }

    .btn-#{$key}{
        @include btn($val); // passing argument $val which will become the background-color
    }



You can also set the default value for parameter:
>> When you do not pass any argument while including the mixin then the default value will be passed.
    Example:
    @mixin btn($bg-color: #e2e2e2){ 
        text-decoration: none;
        cursor: pointer;
        display: inline-block;
        border: 0;
        padding: $base-padding $base-padding * 2;
        border-radius: $base-border-radius;
        background-color: $bg-color;
    }

    .btn-#{$key}{
        @include btn; // not passing argument hence default value will be used for background-color
    }



Function:
>> Difference between function and mixin is mixin groups the common properties and provides them wherever required it may have argument or not. But function is the one which may or may not have argument but it RETURNS ONLY SINGLE VALUE.
    Example:
    lighten ($val 5)
    mix(white red 5)


>> How to create the function?
Create seperate file called _functions.scss and call it in index.scss.
Create the function like this using @function and return value using @return 
    Example:
    @function light-comp($color) {
        $complement: complement($color); // complement is the built in function of sass.
        $light-complement: lighten($complement, 30%);
        @return $light-complement;  // returning single value
    }


How to create the utility classes?
>> refere _utilities.scss inside shinobi folder.